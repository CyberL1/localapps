// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: apps.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createApp = `-- name: CreateApp :one
INSERT INTO apps (id, installed_at, name, parts, icon) VALUES ($1, $2, $3, $4, $5)
RETURNING id, installed_at, name, parts, icon
`

type CreateAppParams struct {
	ID          string
	InstalledAt pgtype.Timestamp
	Name        string
	Parts       []byte
	Icon        string
}

func (q *Queries) CreateApp(ctx context.Context, arg CreateAppParams) (App, error) {
	row := q.db.QueryRow(ctx, createApp,
		arg.ID,
		arg.InstalledAt,
		arg.Name,
		arg.Parts,
		arg.Icon,
	)
	var i App
	err := row.Scan(
		&i.ID,
		&i.InstalledAt,
		&i.Name,
		&i.Parts,
		&i.Icon,
	)
	return i, err
}

const deleteApp = `-- name: DeleteApp :exec
DELETE FROM apps WHERE id = $1
`

func (q *Queries) DeleteApp(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteApp, id)
	return err
}

const getApp = `-- name: GetApp :one
SELECT id, installed_at, name, parts, icon FROM apps WHERE id = $1
`

func (q *Queries) GetApp(ctx context.Context, id string) (App, error) {
	row := q.db.QueryRow(ctx, getApp, id)
	var i App
	err := row.Scan(
		&i.ID,
		&i.InstalledAt,
		&i.Name,
		&i.Parts,
		&i.Icon,
	)
	return i, err
}

const listApps = `-- name: ListApps :many
SELECT id, installed_at, name, parts, icon FROM apps ORDER BY installed_at
`

func (q *Queries) ListApps(ctx context.Context) ([]App, error) {
	rows, err := q.db.Query(ctx, listApps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []App
	for rows.Next() {
		var i App
		if err := rows.Scan(
			&i.ID,
			&i.InstalledAt,
			&i.Name,
			&i.Parts,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
