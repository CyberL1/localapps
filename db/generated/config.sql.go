// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: config.sql

package db

import (
	"context"
	"database/sql"
)

const getConfig = `-- name: GetConfig :many
SELECT "key", value FROM config
`

func (q *Queries) GetConfig(ctx context.Context) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, getConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setConfigKey = `-- name: SetConfigKey :one
INSERT INTO config (key, value) VALUES (?, ?)
RETURNING "key", value
`

type SetConfigKeyParams struct {
	Key   string
	Value sql.NullString
}

func (q *Queries) SetConfigKey(ctx context.Context, arg SetConfigKeyParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, setConfigKey, arg.Key, arg.Value)
	var i Config
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const updateConfigKey = `-- name: UpdateConfigKey :one
UPDATE config SET value = ? WHERE key = ?
RETURNING "key", value
`

type UpdateConfigKeyParams struct {
	Value sql.NullString
	Key   string
}

func (q *Queries) UpdateConfigKey(ctx context.Context, arg UpdateConfigKeyParams) (Config, error) {
	row := q.db.QueryRowContext(ctx, updateConfigKey, arg.Value, arg.Key)
	var i Config
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}
